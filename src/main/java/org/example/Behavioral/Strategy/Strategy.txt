Object Behavioral

Define a family of algorithms
Encapsulate each one and make them interchangeable. Strategy lets the algorithm vary independently of clients that use it.

Also known as policy.

Strategy(Compositor)
    declares an interface common to all supported algorithms. Context uses this interface to call the algorithm defined
    by a ConcreteStrategy
ConcreteStrategy
    implements the algorithm using the strategy interface.

Context(Composition)
    is configured with a ConcreteStrategy object
    maintains a reference to the Strategy object
    may define an interface that lets strategy access its data


Applicability
    Use strategy pattern when
        Many related classes differ only in their behavior
        You need different variants of an algorithm
        An algorithm uses data that clients shouldn't know about. Use the strategy pattern to avoid exposing complex, algorithm
        specific data structures
        A class defines many behaviors and these appear as multiple conditional statements in its operations
        Instead of many conditionals, move related conditional branches into their own Strategy class
