Define a one-to-many dependency between objects so that when one object changes its state,
all its dependents are notified and updated automatically
Dependents
Publish-Subscribe
A common side effect of partitioning a system into a collection of cooperating classes is the need to maintain consistency
between related objects.
You don't want to achieve consistency by making the classes tightly coupled, because that reduces their reusability.
Spreadsheet object - Bar chart Object - Pie chart Object - Data

Observer pattern describes how to establish these relationships.
The key objects in this pattern are subject and observer.

Participants
1. Subject
2. Observer
3. ConcreteSubject
4. ConcreteObserver
    - maintains reference to a ConcreteSubject object
    - stores state that should stay consistent with the subject's
    - implements the Observer's update interface to keep its state consistent with the subject's

A subject may have any number of dependent observers.
All observers are notified whenever the subject undergoes a change in state.
In response, each observer will query the subject to synchronise its state with the subject's state.

Interaction - publish/subscribe. The subject is the publisher of notifications. It sends out these notifications without having
to know who its observers are. Any number of observers can subscribe to receive notifications.

Applicability
1. When an abstraction has two aspects, one dependent on the other.
2. When change to one object requires changing others and you don't know how many objects need to be changed.
3. When an object should be able to notify other objects without making assumptions about who these objects are. In other words,
you don't want these objects tightly coupled.
