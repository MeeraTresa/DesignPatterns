Object Structural
Compose objects into tree structures to represent part-whole hierarchies.
Composite lets clients treat individual objects and composition of objects uniformly.

The key to the Composite pattern is an abstract class that represents both primitives and their containers.
For the graphic system, this class is Grpahic.
Grpahic declares operations like Draw that are specific to Grpahical Objects.
It also declares operations that all composite objects share, such as operations for accessing and managing its children.


Component (Graphic)
    Declares interface for objects in the composition
    Implements default behavior of the interface common to all classes
    Declares and interface for accessing and managing child components
    Optional - define an interface for accessing a component's parent in the recursive structure and implements it
            if thats appropriate
Leaf (Line, Text, Rectangle etc)
    - Represents leaf objects in the composition
    - A leaf has no children
    - Defines behavior for primitive objects in the composition
Composite (Picture)
    - Defines behaviors for components having children
    - Stores child components
    - Implements child related operations in the Component interface
Client

Consequences

Defines class hierarchies consisting of primitive objects and composite objects.
Primitive objects can be composed into more complex objects which in turn can be composed and so on recursively. Wherever client code expects
a primitive object, it can also take a composite object

Makes the client simple.
Makes it easier to add new kinds of compositions
Can make your design overly general